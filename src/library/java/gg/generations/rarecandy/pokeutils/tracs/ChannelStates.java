package gg.generations.rarecandy.pokeutils.tracs;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ChannelStates extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static ChannelStates getRootAsChannelStates(ByteBuffer _bb) { return getRootAsChannelStates(_bb, new ChannelStates()); }
  public static ChannelStates getRootAsChannelStates(ByteBuffer _bb, ChannelStates obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ChannelStates __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TopState stateMachines(int j) { return stateMachines(new TopState(), j); }
  public TopState stateMachines(TopState obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int stateMachinesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public TopState.Vector stateMachinesVector() { return stateMachinesVector(new TopState.Vector()); }
  public TopState.Vector stateMachinesVector(TopState.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createChannelStates(FlatBufferBuilder builder,
      int stateMachinesOffset) {
    builder.startTable(1);
    ChannelStates.addStateMachines(builder, stateMachinesOffset);
    return ChannelStates.endChannelStates(builder);
  }

  public static void startChannelStates(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addStateMachines(FlatBufferBuilder builder, int stateMachinesOffset) { builder.addOffset(0, stateMachinesOffset, 0); }
  public static int createStateMachinesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startStateMachinesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endChannelStates(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ChannelStates get(int j) { return get(new ChannelStates(), j); }
    public ChannelStates get(ChannelStates obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ChannelStatesT unpack() {
    ChannelStatesT _o = new ChannelStatesT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ChannelStatesT _o) {
    TopStateT[] _oStateMachines = new TopStateT[stateMachinesLength()];
    for (int _j = 0; _j < stateMachinesLength(); ++_j) {_oStateMachines[_j] = (stateMachines(_j) != null ? stateMachines(_j).unpack() : null);}
    _o.setStateMachines(_oStateMachines);
  }
  public static int pack(FlatBufferBuilder builder, ChannelStatesT _o) {
    if (_o == null) return 0;
    int _stateMachines = 0;
    if (_o.getStateMachines() != null) {
      int[] __stateMachines = new int[_o.getStateMachines().length];
      int _j = 0;
      for (TopStateT _e : _o.getStateMachines()) { __stateMachines[_j] = TopState.pack(builder, _e); _j++;}
      _stateMachines = createStateMachinesVector(builder, __stateMachines);
    }
    return createChannelStates(
      builder,
      _stateMachines);
  }
}

