// automatically generated by the FlatBuffers compiler, do not modify

package gg.generationsmod.rarecandy.model.animation.gfbanm;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class MaterialTrack extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static MaterialTrack getRootAsMaterialTrack(ByteBuffer _bb) { return getRootAsMaterialTrack(_bb, new MaterialTrack()); }
  public static MaterialTrack getRootAsMaterialTrack(ByteBuffer _bb, MaterialTrack obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MaterialTrack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public FlagEntry flags(int j) { return flags(new FlagEntry(), j); }
  public FlagEntry flags(FlagEntry obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int flagsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public FlagEntry.Vector flagsVector() { return flagsVector(new FlagEntry.Vector()); }
  public FlagEntry.Vector flagsVector(FlagEntry.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public ShaderEntry values(int j) { return values(new ShaderEntry(), j); }
  public ShaderEntry values(ShaderEntry obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int valuesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ShaderEntry.Vector valuesVector() { return valuesVector(new ShaderEntry.Vector()); }
  public ShaderEntry.Vector valuesVector(ShaderEntry.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public ColorEntry vectors(int j) { return vectors(new ColorEntry(), j); }
  public ColorEntry vectors(ColorEntry obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int vectorsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ColorEntry.Vector vectorsVector() { return vectorsVector(new ColorEntry.Vector()); }
  public ColorEntry.Vector vectorsVector(ColorEntry.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createMaterialTrack(FlatBufferBuilder builder,
      int nameOffset,
      int flagsOffset,
      int valuesOffset,
      int vectorsOffset) {
    builder.startTable(4);
    MaterialTrack.addVectors(builder, vectorsOffset);
    MaterialTrack.addValues(builder, valuesOffset);
    MaterialTrack.addFlags(builder, flagsOffset);
    MaterialTrack.addName(builder, nameOffset);
    return MaterialTrack.endMaterialTrack(builder);
  }

  public static void startMaterialTrack(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addFlags(FlatBufferBuilder builder, int flagsOffset) { builder.addOffset(1, flagsOffset, 0); }
  public static int createFlagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFlagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addValues(FlatBufferBuilder builder, int valuesOffset) { builder.addOffset(2, valuesOffset, 0); }
  public static int createValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addVectors(FlatBufferBuilder builder, int vectorsOffset) { builder.addOffset(3, vectorsOffset, 0); }
  public static int createVectorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startVectorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endMaterialTrack(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MaterialTrack get(int j) { return get(new MaterialTrack(), j); }
    public MaterialTrack get(MaterialTrack obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public MaterialTrackT unpack() {
    MaterialTrackT _o = new MaterialTrackT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(MaterialTrackT _o) {
    String _oName = name();
    _o.setName(_oName);
    FlagEntryT[] _oFlags = new FlagEntryT[flagsLength()];
    for (int _j = 0; _j < flagsLength(); ++_j) {_oFlags[_j] = (flags(_j) != null ? flags(_j).unpack() : null);}
    _o.setFlags(_oFlags);
    ShaderEntryT[] _oValues = new ShaderEntryT[valuesLength()];
    for (int _j = 0; _j < valuesLength(); ++_j) {_oValues[_j] = (values(_j) != null ? values(_j).unpack() : null);}
    _o.setValues(_oValues);
    ColorEntryT[] _oVectors = new ColorEntryT[vectorsLength()];
    for (int _j = 0; _j < vectorsLength(); ++_j) {_oVectors[_j] = (vectors(_j) != null ? vectors(_j).unpack() : null);}
    _o.setVectors(_oVectors);
  }
  public static int pack(FlatBufferBuilder builder, MaterialTrackT _o) {
    if (_o == null) return 0;
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    int _flags = 0;
    if (_o.getFlags() != null) {
      int[] __flags = new int[_o.getFlags().length];
      int _j = 0;
      for (FlagEntryT _e : _o.getFlags()) { __flags[_j] = FlagEntry.pack(builder, _e); _j++;}
      _flags = createFlagsVector(builder, __flags);
    }
    int _values = 0;
    if (_o.getValues() != null) {
      int[] __values = new int[_o.getValues().length];
      int _j = 0;
      for (ShaderEntryT _e : _o.getValues()) { __values[_j] = ShaderEntry.pack(builder, _e); _j++;}
      _values = createValuesVector(builder, __values);
    }
    int _vectors = 0;
    if (_o.getVectors() != null) {
      int[] __vectors = new int[_o.getVectors().length];
      int _j = 0;
      for (ColorEntryT _e : _o.getVectors()) { __vectors[_j] = ColorEntry.pack(builder, _e); _j++;}
      _vectors = createVectorsVector(builder, __vectors);
    }
    return createMaterialTrack(
      builder,
      _name,
      _flags,
      _values,
      _vectors);
  }
}

