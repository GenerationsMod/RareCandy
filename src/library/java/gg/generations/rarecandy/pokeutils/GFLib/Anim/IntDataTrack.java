// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.GFLib.Anim;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class IntDataTrack extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static IntDataTrack getRootAsIntDataTrack(ByteBuffer _bb) { return getRootAsIntDataTrack(_bb, new IntDataTrack()); }
  public static IntDataTrack getRootAsIntDataTrack(ByteBuffer _bb, IntDataTrack obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IntDataTrack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long value() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }

  public static int createIntDataTrack(FlatBufferBuilder builder,
      long value) {
    builder.startTable(1);
    IntDataTrack.addValue(builder, value);
    return IntDataTrack.endIntDataTrack(builder);
  }

  public static void startIntDataTrack(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addValue(FlatBufferBuilder builder, long value) { builder.addInt(0, (int) value, (int) 0L); }
  public static int endIntDataTrack(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IntDataTrack get(int j) { return get(new IntDataTrack(), j); }
    public IntDataTrack get(IntDataTrack obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public IntDataTrackT unpack() {
    IntDataTrackT _o = new IntDataTrackT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(IntDataTrackT _o) {
    long _oValue = value();
    _o.setValue(_oValue);
  }
  public static int pack(FlatBufferBuilder builder, IntDataTrackT _o) {
    if (_o == null) return 0;
    return createIntDataTrack(
      builder,
      _o.getValue());
  }
}

