package gg.generations.rarecandy.pokeutils.smdi;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Keyframe extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static Keyframe getRootAsKeyframe(ByteBuffer _bb) { return getRootAsKeyframe(_bb, new Keyframe()); }
  public static Keyframe getRootAsKeyframe(ByteBuffer _bb, Keyframe obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Keyframe __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int time() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public BoneState states(int j) { return states(new BoneState(), j); }
  public BoneState states(BoneState obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int statesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public BoneState.Vector statesVector() { return statesVector(new BoneState.Vector()); }
  public BoneState.Vector statesVector(BoneState.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createKeyframe(FlatBufferBuilder builder,
      int time,
      int statesOffset) {
    builder.startTable(2);
    Keyframe.addStates(builder, statesOffset);
    Keyframe.addTime(builder, time);
    return Keyframe.endKeyframe(builder);
  }

  public static void startKeyframe(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addTime(FlatBufferBuilder builder, int time) { builder.addInt(0, time, 0); }
  public static void addStates(FlatBufferBuilder builder, int statesOffset) { builder.addOffset(1, statesOffset, 0); }
  public static int createStatesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startStatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endKeyframe(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Keyframe get(int j) { return get(new Keyframe(), j); }
    public Keyframe get(Keyframe obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public KeyframeT unpack() {
    KeyframeT _o = new KeyframeT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(KeyframeT _o) {
    int _oTime = time();
    _o.setTime(_oTime);
    BoneStateT[] _oStates = new BoneStateT[statesLength()];
    for (int _j = 0; _j < statesLength(); ++_j) {_oStates[_j] = (states(_j) != null ? states(_j).unpack() : null);}
    _o.setStates(_oStates);
  }
  public static int pack(FlatBufferBuilder builder, KeyframeT _o) {
    if (_o == null) return 0;
    int _states = 0;
    if (_o.getStates() != null) {
      int[] __states = new int[_o.getStates().length];
      int _j = 0;
      for (BoneStateT _e : _o.getStates()) { __states[_j] = BoneState.pack(builder, _e); _j++;}
      _states = createStatesVector(builder, __states);
    }
    return createKeyframe(
      builder,
      _o.getTime(),
      _states);
  }
}

