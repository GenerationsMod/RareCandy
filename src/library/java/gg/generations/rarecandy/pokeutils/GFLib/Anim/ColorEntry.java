// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.GFLib.Anim;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ColorEntry extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static ColorEntry getRootAsColorEntry(ByteBuffer _bb) { return getRootAsColorEntry(_bb, new ColorEntry()); }
  public static ColorEntry getRootAsColorEntry(ByteBuffer _bb, ColorEntry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ColorEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public byte colType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table col(Table obj) { int o = __offset(8); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createColorEntry(FlatBufferBuilder builder,
      int nameOffset,
      byte colType,
      int colOffset) {
    builder.startTable(3);
    ColorEntry.addCol(builder, colOffset);
    ColorEntry.addName(builder, nameOffset);
    ColorEntry.addColType(builder, colType);
    return ColorEntry.endColorEntry(builder);
  }

  public static void startColorEntry(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addColType(FlatBufferBuilder builder, byte colType) { builder.addByte(1, colType, 0); }
  public static void addCol(FlatBufferBuilder builder, int colOffset) { builder.addOffset(2, colOffset, 0); }
  public static int endColorEntry(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ColorEntry get(int j) { return get(new ColorEntry(), j); }
    public ColorEntry get(ColorEntry obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ColorEntryT unpack() {
    ColorEntryT _o = new ColorEntryT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ColorEntryT _o) {
    String _oName = name();
    _o.setName(_oName);
    VectorTrackUnion _oCol = new VectorTrackUnion();
    byte _oColType = colType();
    _oCol.setType(_oColType);
    Table _oColValue;
    switch (_oColType) {
      case VectorTrack.FixedVectorTrack:
        _oColValue = col(new FixedVectorTrack());
        _oCol.setValue(_oColValue != null ? ((FixedVectorTrack) _oColValue).unpack() : null);
        break;
      case VectorTrack.DynamicVectorTrack:
        _oColValue = col(new DynamicVectorTrack());
        _oCol.setValue(_oColValue != null ? ((DynamicVectorTrack) _oColValue).unpack() : null);
        break;
      case VectorTrack.Framed16VectorTrack:
        _oColValue = col(new Framed16VectorTrack());
        _oCol.setValue(_oColValue != null ? ((Framed16VectorTrack) _oColValue).unpack() : null);
        break;
      case VectorTrack.Framed8VectorTrack:
        _oColValue = col(new Framed8VectorTrack());
        _oCol.setValue(_oColValue != null ? ((Framed8VectorTrack) _oColValue).unpack() : null);
        break;
      default: break;
    }
    _o.setCol(_oCol);
  }
  public static int pack(FlatBufferBuilder builder, ColorEntryT _o) {
    if (_o == null) return 0;
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    byte _colType = _o.getCol() == null ? VectorTrack.NONE : _o.getCol().getType();
    int _col = _o.getCol() == null ? 0 : VectorTrackUnion.pack(builder, _o.getCol());
    return createColorEntry(
      builder,
      _name,
      _colType,
      _col);
  }
}

