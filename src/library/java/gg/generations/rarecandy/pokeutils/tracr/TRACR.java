// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.tracr;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TRACR extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static TRACR getRootAsTRACR(ByteBuffer _bb) { return getRootAsTRACR(_bb, new TRACR()); }
  public static TRACR getRootAsTRACR(ByteBuffer _bb, TRACR obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TRACR __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TrackList trackList() { return trackList(new TrackList()); }
  public TrackList trackList(TrackList obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createTRACR(FlatBufferBuilder builder,
      int trackListOffset) {
    builder.startTable(1);
    TRACR.addTrackList(builder, trackListOffset);
    return TRACR.endTRACR(builder);
  }

  public static void startTRACR(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addTrackList(FlatBufferBuilder builder, int trackListOffset) { builder.addOffset(0, trackListOffset, 0); }
  public static int endTRACR(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTRACRBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedTRACRBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TRACR get(int j) { return get(new TRACR(), j); }
    public TRACR get(TRACR obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TRACRT unpack() {
    TRACRT _o = new TRACRT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TRACRT _o) {
    if (trackList() != null) _o.setTrackList(trackList().unpack());
    else _o.setTrackList(null);
  }
  public static int pack(FlatBufferBuilder builder, TRACRT _o) {
    if (_o == null) return 0;
    int _trackList = _o.getTrackList() == null ? 0 : TrackList.pack(builder, _o.getTrackList());
    return createTRACR(
      builder,
      _trackList);
  }
}

