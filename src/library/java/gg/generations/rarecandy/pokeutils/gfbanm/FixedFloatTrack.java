// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.gfbanm;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FixedFloatTrack extends Table {
    public static void ValidateVersion() {
        Constants.FLATBUFFERS_23_5_26();
    }

    public static FixedFloatTrack getRootAsFixedFloatTrack(ByteBuffer _bb) {
        return getRootAsFixedFloatTrack(_bb, new FixedFloatTrack());
    }

    public static FixedFloatTrack getRootAsFixedFloatTrack(ByteBuffer _bb, FixedFloatTrack obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        __reset(_i, _bb);
    }

    public FixedFloatTrack __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public float float_() {
        int o = __offset(4);
        return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f;
    }

    public static int createFixedFloatTrack(FlatBufferBuilder builder,
                                            float float_) {
        builder.startTable(1);
        FixedFloatTrack.addFloat(builder, float_);
        return FixedFloatTrack.endFixedFloatTrack(builder);
    }

    public static void startFixedFloatTrack(FlatBufferBuilder builder) {
        builder.startTable(1);
    }

    public static void addFloat(FlatBufferBuilder builder, float float_) {
        builder.addFloat(0, float_, 0.0f);
    }

    public static int endFixedFloatTrack(FlatBufferBuilder builder) {
        int o = builder.endTable();
        return o;
    }

    public static final class Vector extends BaseVector {
        public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
            __reset(_vector, _element_size, _bb);
            return this;
        }

        public FixedFloatTrack get(int j) {
            return get(new FixedFloatTrack(), j);
        }

        public FixedFloatTrack get(FixedFloatTrack obj, int j) {
            return obj.__assign(__indirect(__element(j), bb), bb);
        }
    }

    public FixedFloatTrackT unpack() {
        FixedFloatTrackT _o = new FixedFloatTrackT();
        unpackTo(_o);
        return _o;
    }

    public void unpackTo(FixedFloatTrackT _o) {
        float _oFloat = float_();
        _o.setFloat(_oFloat);
    }

    public static int pack(FlatBufferBuilder builder, FixedFloatTrackT _o) {
        if (_o == null) return 0;
        return createFixedFloatTrack(
                builder,
                _o.getFloat());
    }
}

