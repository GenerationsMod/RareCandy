// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.gfbanm.tracks.data;

import com.google.gson.*;
import gg.generations.rarecandy.pokeutils.gfbanm.tracks._boolean.*;

import java.lang.reflect.Type;

@SuppressWarnings("unused")
public interface DataTrack {
  public static final byte NONE = 0;
  public static final byte IntDataTrack = 1;
  public static final byte FloatDataTrack = 2;
  public static final byte ByteDataTrack = 3;
  public static final byte StringDataTrack = 4;

  public static final String[] names = { "NONE", "IntDataTrack", "FloatDataTrack", "ByteDataTrack", "StringDataTrack", };

  public static String name(int e) { return names[e]; }

  class Serializer implements JsonSerializer<DataTrack>, JsonDeserializer<DataTrack> {
    @Override
    public DataTrack deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
      var type = json.getAsJsonObject().remove("type").getAsString();

      return switch (type) {
        case "byte" -> context.deserialize(json, ByteDataTrackT.class);
        case "float" -> context.deserialize(json, FloatDataTrackT.class);
        case "int" -> context.deserialize(json, IntDataTrackT.class);
        case "string" -> context.deserialize(json, StringDataTrackT.class);
        default -> null;
      };
    }

    @Override
    public JsonElement serialize(DataTrack src, Type typeOfSrc, JsonSerializationContext context) {
      if(src instanceof ByteDataTrackT track) return applyType(context, track, "byte");
      if(src instanceof FloatDataTrackT track) return applyType(context, track, "float");
      if(src instanceof IntDataTrackT track) return applyType(context, track, "int");
      if(src instanceof StringDataTrackT track) return applyType(context, track, "string");
      else return null;
    }

    public static <T> JsonObject applyType(JsonSerializationContext context, T t, String type) {
      var obj = context.serialize(t).getAsJsonObject();
      obj.addProperty("type", type);
      return obj;
    }
  }
}

