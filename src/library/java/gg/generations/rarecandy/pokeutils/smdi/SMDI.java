package gg.generations.rarecandy.pokeutils.smdi;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SMDI extends Table {
    public static void ValidateVersion() {
        Constants.FLATBUFFERS_23_5_26();
    }

    public static SMDI getRootAsSMDI(ByteBuffer _bb) {
        return getRootAsSMDI(_bb, new SMDI());
    }

    public static SMDI getRootAsSMDI(ByteBuffer _bb, SMDI obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        __reset(_i, _bb);
    }

    public SMDI __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public Bone bones(int j) {
        return bones(new Bone(), j);
    }

    public Bone bones(Bone obj, int j) {
        int o = __offset(4);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int bonesLength() {
        int o = __offset(4);
        return o != 0 ? __vector_len(o) : 0;
    }

    public Bone.Vector bonesVector() {
        return bonesVector(new Bone.Vector());
    }

    public Bone.Vector bonesVector(Bone.Vector obj) {
        int o = __offset(4);
        return o != 0 ? obj.__assign(__vector(o), 4, bb) : null;
    }

    public Keyframe keyframes(int j) {
        return keyframes(new Keyframe(), j);
    }

    public Keyframe keyframes(Keyframe obj, int j) {
        int o = __offset(6);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int keyframesLength() {
        int o = __offset(6);
        return o != 0 ? __vector_len(o) : 0;
    }

    public Keyframe.Vector keyframesVector() {
        return keyframesVector(new Keyframe.Vector());
    }

    public Keyframe.Vector keyframesVector(Keyframe.Vector obj) {
        int o = __offset(6);
        return o != 0 ? obj.__assign(__vector(o), 4, bb) : null;
    }

    public static int createSMDI(FlatBufferBuilder builder,
                                 int bonesOffset,
                                 int keyframesOffset) {
        builder.startTable(2);
        SMDI.addKeyframes(builder, keyframesOffset);
        SMDI.addBones(builder, bonesOffset);
        return SMDI.endSMDI(builder);
    }

    public static void startSMDI(FlatBufferBuilder builder) {
        builder.startTable(2);
    }

    public static void addBones(FlatBufferBuilder builder, int bonesOffset) {
        builder.addOffset(0, bonesOffset, 0);
    }

    public static int createBonesVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startBonesVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static void addKeyframes(FlatBufferBuilder builder, int keyframesOffset) {
        builder.addOffset(1, keyframesOffset, 0);
    }

    public static int createKeyframesVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startKeyframesVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static int endSMDI(FlatBufferBuilder builder) {
        int o = builder.endTable();
        return o;
    }

    public static void finishSMDIBuffer(FlatBufferBuilder builder, int offset) {
        builder.finish(offset);
    }

    public static void finishSizePrefixedSMDIBuffer(FlatBufferBuilder builder, int offset) {
        builder.finishSizePrefixed(offset);
    }

    public static final class Vector extends BaseVector {
        public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
            __reset(_vector, _element_size, _bb);
            return this;
        }

        public SMDI get(int j) {
            return get(new SMDI(), j);
        }

        public SMDI get(SMDI obj, int j) {
            return obj.__assign(__indirect(__element(j), bb), bb);
        }
    }

    public SMDIT unpack() {
        SMDIT _o = new SMDIT();
        unpackTo(_o);
        return _o;
    }

    public void unpackTo(SMDIT _o) {
        BoneT[] _oBones = new BoneT[bonesLength()];
        for (int _j = 0; _j < bonesLength(); ++_j) {
            _oBones[_j] = (bones(_j) != null ? bones(_j).unpack() : null);
        }
        _o.setBones(_oBones);
        KeyframeT[] _oKeyframes = new KeyframeT[keyframesLength()];
        for (int _j = 0; _j < keyframesLength(); ++_j) {
            _oKeyframes[_j] = (keyframes(_j) != null ? keyframes(_j).unpack() : null);
        }
        _o.setKeyframes(_oKeyframes);
    }

    public static int pack(FlatBufferBuilder builder, SMDIT _o) {
        if (_o == null) return 0;
        int _bones = 0;
        if (_o.getBones() != null) {
            int[] __bones = new int[_o.getBones().length];
            int _j = 0;
            for (BoneT _e : _o.getBones()) {
                __bones[_j] = Bone.pack(builder, _e);
                _j++;
            }
            _bones = createBonesVector(builder, __bones);
        }
        int _keyframes = 0;
        if (_o.getKeyframes() != null) {
            int[] __keyframes = new int[_o.getKeyframes().length];
            int _j = 0;
            for (KeyframeT _e : _o.getKeyframes()) {
                __keyframes[_j] = Keyframe.pack(builder, _e);
                _j++;
            }
            _keyframes = createKeyframesVector(builder, __keyframes);
        }
        return createSMDI(
                builder,
                _bones,
                _keyframes);
    }
}

