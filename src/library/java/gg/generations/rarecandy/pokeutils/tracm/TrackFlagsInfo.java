// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.tracm;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TrackFlagsInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static TrackFlagsInfo getRootAsTrackFlagsInfo(ByteBuffer _bb) { return getRootAsTrackFlagsInfo(_bb, new TrackFlagsInfo()); }
  public static TrackFlagsInfo getRootAsTrackFlagsInfo(ByteBuffer _bb, TrackFlagsInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TrackFlagsInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte valuesType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table values(Table obj) { int o = __offset(6); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createTrackFlagsInfo(FlatBufferBuilder builder,
      byte valuesType,
      int valuesOffset) {
    builder.startTable(2);
    TrackFlagsInfo.addValues(builder, valuesOffset);
    TrackFlagsInfo.addValuesType(builder, valuesType);
    return TrackFlagsInfo.endTrackFlagsInfo(builder);
  }

  public static void startTrackFlagsInfo(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addValuesType(FlatBufferBuilder builder, byte valuesType) { builder.addByte(0, valuesType, 0); }
  public static void addValues(FlatBufferBuilder builder, int valuesOffset) { builder.addOffset(1, valuesOffset, 0); }
  public static int endTrackFlagsInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TrackFlagsInfo get(int j) { return get(new TrackFlagsInfo(), j); }
    public TrackFlagsInfo get(TrackFlagsInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

