// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.gfbanm;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ShaderEntry extends Table {
    public static void ValidateVersion() {
        Constants.FLATBUFFERS_23_5_26();
    }

    public static ShaderEntry getRootAsShaderEntry(ByteBuffer _bb) {
        return getRootAsShaderEntry(_bb, new ShaderEntry());
    }

    public static ShaderEntry getRootAsShaderEntry(ByteBuffer _bb, ShaderEntry obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        __reset(_i, _bb);
    }

    public ShaderEntry __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public String name() {
        int o = __offset(4);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer nameAsByteBuffer() {
        return __vector_as_bytebuffer(4, 1);
    }

    public ByteBuffer nameInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 4, 1);
    }

    public byte valueType() {
        int o = __offset(6);
        return o != 0 ? bb.get(o + bb_pos) : 0;
    }

    public Table value(Table obj) {
        int o = __offset(8);
        return o != 0 ? __union(obj, o + bb_pos) : null;
    }

    public static int createShaderEntry(FlatBufferBuilder builder,
                                        int nameOffset,
                                        byte valueType,
                                        int valueOffset) {
        builder.startTable(3);
        ShaderEntry.addValue(builder, valueOffset);
        ShaderEntry.addName(builder, nameOffset);
        ShaderEntry.addValueType(builder, valueType);
        return ShaderEntry.endShaderEntry(builder);
    }

    public static void startShaderEntry(FlatBufferBuilder builder) {
        builder.startTable(3);
    }

    public static void addName(FlatBufferBuilder builder, int nameOffset) {
        builder.addOffset(0, nameOffset, 0);
    }

    public static void addValueType(FlatBufferBuilder builder, byte valueType) {
        builder.addByte(1, valueType, 0);
    }

    public static void addValue(FlatBufferBuilder builder, int valueOffset) {
        builder.addOffset(2, valueOffset, 0);
    }

    public static int endShaderEntry(FlatBufferBuilder builder) {
        int o = builder.endTable();
        return o;
    }

    public static final class Vector extends BaseVector {
        public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
            __reset(_vector, _element_size, _bb);
            return this;
        }

        public ShaderEntry get(int j) {
            return get(new ShaderEntry(), j);
        }

        public ShaderEntry get(ShaderEntry obj, int j) {
            return obj.__assign(__indirect(__element(j), bb), bb);
        }
    }

    public ShaderEntryT unpack() {
        ShaderEntryT _o = new ShaderEntryT();
        unpackTo(_o);
        return _o;
    }

    public void unpackTo(ShaderEntryT _o) {
        String _oName = name();
        _o.setName(_oName);
        FloatTrackUnion _oValue = new FloatTrackUnion();
        byte _oValueType = valueType();
        _oValue.setType(_oValueType);
        Table _oValueValue;
        switch (_oValueType) {
            case FloatTrack.FixedFloatTrack:
                _oValueValue = value(new FixedFloatTrack());
                _oValue.setValue(_oValueValue != null ? ((FixedFloatTrack) _oValueValue).unpack() : null);
                break;
            case FloatTrack.DynamicFloatTrack:
                _oValueValue = value(new DynamicFloatTrack());
                _oValue.setValue(_oValueValue != null ? ((DynamicFloatTrack) _oValueValue).unpack() : null);
                break;
            case FloatTrack.Framed16FloatTrack:
                _oValueValue = value(new Framed16FloatTrack());
                _oValue.setValue(_oValueValue != null ? ((Framed16FloatTrack) _oValueValue).unpack() : null);
                break;
            case FloatTrack.Framed8FloatTrack:
                _oValueValue = value(new Framed8FloatTrack());
                _oValue.setValue(_oValueValue != null ? ((Framed8FloatTrack) _oValueValue).unpack() : null);
                break;
            default:
                break;
        }
        _o.setValue(_oValue);
    }

    public static int pack(FlatBufferBuilder builder, ShaderEntryT _o) {
        if (_o == null) return 0;
        int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
        byte _valueType = _o.getValue() == null ? FloatTrack.NONE : _o.getValue().getType();
        int _value = _o.getValue() == null ? 0 : FloatTrackUnion.pack(builder, _o.getValue());
        return createShaderEntry(
                builder,
                _name,
                _valueType,
                _value);
    }
}

