// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.GFLib.Anim;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FloatDataTrack extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static FloatDataTrack getRootAsFloatDataTrack(ByteBuffer _bb) { return getRootAsFloatDataTrack(_bb, new FloatDataTrack()); }
  public static FloatDataTrack getRootAsFloatDataTrack(ByteBuffer _bb, FloatDataTrack obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FloatDataTrack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float value() { int o = __offset(4); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }

  public static int createFloatDataTrack(FlatBufferBuilder builder,
      float value) {
    builder.startTable(1);
    FloatDataTrack.addValue(builder, value);
    return FloatDataTrack.endFloatDataTrack(builder);
  }

  public static void startFloatDataTrack(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addValue(FlatBufferBuilder builder, float value) { builder.addFloat(0, value, 0.0f); }
  public static int endFloatDataTrack(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FloatDataTrack get(int j) { return get(new FloatDataTrack(), j); }
    public FloatDataTrack get(FloatDataTrack obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public FloatDataTrackT unpack() {
    FloatDataTrackT _o = new FloatDataTrackT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(FloatDataTrackT _o) {
    float _oValue = value();
    _o.setValue(_oValue);
  }
  public static int pack(FlatBufferBuilder builder, FloatDataTrackT _o) {
    if (_o == null) return 0;
    return createFloatDataTrack(
      builder,
      _o.getValue());
  }
}

