// automatically generated by the FlatBuffers compiler, do not modify

package com.pokemod.pokeutils.tranm;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SkelAnim extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_4(); }
  public static SkelAnim getRootAsSkelAnim(ByteBuffer _bb) { return getRootAsSkelAnim(_bb, new SkelAnim()); }
  public static SkelAnim getRootAsSkelAnim(ByteBuffer _bb, SkelAnim obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SkelAnim __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Bone bones(int j) { return bones(new Bone(), j); }
  public Bone bones(Bone obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int bonesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public Bone.Vector bonesVector() { return bonesVector(new Bone.Vector()); }
  public Bone.Vector bonesVector(Bone.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public BoneInit initData(int j) { return initData(new BoneInit(), j); }
  public BoneInit initData(BoneInit obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int initDataLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public BoneInit.Vector initDataVector() { return initDataVector(new BoneInit.Vector()); }
  public BoneInit.Vector initDataVector(BoneInit.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createSkelAnim(FlatBufferBuilder builder,
      int bonesOffset,
      int initDataOffset) {
    builder.startTable(2);
    SkelAnim.addInitData(builder, initDataOffset);
    SkelAnim.addBones(builder, bonesOffset);
    return SkelAnim.endSkelAnim(builder);
  }

  public static void startSkelAnim(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addBones(FlatBufferBuilder builder, int bonesOffset) { builder.addOffset(0, bonesOffset, 0); }
  public static int createBonesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBonesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addInitData(FlatBufferBuilder builder, int initDataOffset) { builder.addOffset(1, initDataOffset, 0); }
  public static int createInitDataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInitDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSkelAnim(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SkelAnim get(int j) { return get(new SkelAnim(), j); }
    public SkelAnim get(SkelAnim obj, int j) {  return obj.__assign(Table.__indirect(__element(j), bb), bb); }
  }
}

