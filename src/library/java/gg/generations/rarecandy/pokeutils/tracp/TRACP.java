package gg.generations.rarecandy.pokeutils.tracp;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TRACP extends Table {
    public static void ValidateVersion() {
        Constants.FLATBUFFERS_23_5_26();
    }

    public static TRACP getRootAsTRACP(ByteBuffer _bb) {
        return getRootAsTRACP(_bb, new TRACP());
    }

    public static TRACP getRootAsTRACP(ByteBuffer _bb, TRACP obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        __reset(_i, _bb);
    }

    public TRACP __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public Entry rootNode() {
        return rootNode(new Entry());
    }

    public Entry rootNode(Entry obj) {
        int o = __offset(4);
        return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null;
    }

    public static int createTRACP(FlatBufferBuilder builder,
                                  int rootNodeOffset) {
        builder.startTable(1);
        TRACP.addRootNode(builder, rootNodeOffset);
        return TRACP.endTRACP(builder);
    }

    public static void startTRACP(FlatBufferBuilder builder) {
        builder.startTable(1);
    }

    public static void addRootNode(FlatBufferBuilder builder, int rootNodeOffset) {
        builder.addOffset(0, rootNodeOffset, 0);
    }

    public static int endTRACP(FlatBufferBuilder builder) {
        int o = builder.endTable();
        return o;
    }

    public static void finishTRACPBuffer(FlatBufferBuilder builder, int offset) {
        builder.finish(offset);
    }

    public static void finishSizePrefixedTRACPBuffer(FlatBufferBuilder builder, int offset) {
        builder.finishSizePrefixed(offset);
    }

    public static final class Vector extends BaseVector {
        public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
            __reset(_vector, _element_size, _bb);
            return this;
        }

        public TRACP get(int j) {
            return get(new TRACP(), j);
        }

        public TRACP get(TRACP obj, int j) {
            return obj.__assign(__indirect(__element(j), bb), bb);
        }
    }

    public TRACPT unpack() {
        TRACPT _o = new TRACPT();
        unpackTo(_o);
        return _o;
    }

    public void unpackTo(TRACPT _o) {
        if (rootNode() != null) _o.setRootNode(rootNode().unpack());
        else _o.setRootNode(null);
    }

    public static int pack(FlatBufferBuilder builder, TRACPT _o) {
        if (_o == null) return 0;
        int _rootNode = _o.getRootNode() == null ? 0 : Entry.pack(builder, _o.getRootNode());
        return createTRACP(
                builder,
                _rootNode);
    }
}

