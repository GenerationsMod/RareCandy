package gg.generations.rarecandy.pokeutils.tracl;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TRACL extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static TRACL getRootAsTRACL(ByteBuffer _bb) { return getRootAsTRACL(_bb, new TRACL()); }
  public static TRACL getRootAsTRACL(ByteBuffer _bb, TRACL obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TRACL __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Node_Root root() { return root(new Node_Root()); }
  public Node_Root root(Node_Root obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createTRACL(FlatBufferBuilder builder,
      int rootOffset) {
    builder.startTable(1);
    TRACL.addRoot(builder, rootOffset);
    return TRACL.endTRACL(builder);
  }

  public static void startTRACL(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addRoot(FlatBufferBuilder builder, int rootOffset) { builder.addOffset(0, rootOffset, 0); }
  public static int endTRACL(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTRACLBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedTRACLBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TRACL get(int j) { return get(new TRACL(), j); }
    public TRACL get(TRACL obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TRACLT unpack() {
    TRACLT _o = new TRACLT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TRACLT _o) {
    if (root() != null) _o.setRoot(root().unpack());
    else _o.setRoot(null);
  }
  public static int pack(FlatBufferBuilder builder, TRACLT _o) {
    if (_o == null) return 0;
    int _root = _o.getRoot() == null ? 0 : Node_Root.pack(builder, _o.getRoot());
    return createTRACL(
      builder,
      _root);
  }
}

