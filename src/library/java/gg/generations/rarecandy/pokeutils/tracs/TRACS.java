package gg.generations.rarecandy.pokeutils.tracs;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TRACS extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static TRACS getRootAsTRACS(ByteBuffer _bb) { return getRootAsTRACS(_bb, new TRACS()); }
  public static TRACS getRootAsTRACS(ByteBuffer _bb, TRACS obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TRACS __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ChannelStates states() { return states(new ChannelStates()); }
  public ChannelStates states(ChannelStates obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createTRACS(FlatBufferBuilder builder,
      int statesOffset) {
    builder.startTable(1);
    TRACS.addStates(builder, statesOffset);
    return TRACS.endTRACS(builder);
  }

  public static void startTRACS(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addStates(FlatBufferBuilder builder, int statesOffset) { builder.addOffset(0, statesOffset, 0); }
  public static int endTRACS(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTRACSBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedTRACSBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TRACS get(int j) { return get(new TRACS(), j); }
    public TRACS get(TRACS obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TRACST unpack() {
    TRACST _o = new TRACST();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TRACST _o) {
    if (states() != null) _o.setStates(states().unpack());
    else _o.setStates(null);
  }
  public static int pack(FlatBufferBuilder builder, TRACST _o) {
    if (_o == null) return 0;
    int _states = _o.getStates() == null ? 0 : ChannelStates.pack(builder, _o.getStates());
    return createTRACS(
      builder,
      _states);
  }
}

