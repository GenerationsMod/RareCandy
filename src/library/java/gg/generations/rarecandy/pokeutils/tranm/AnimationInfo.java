package gg.generations.rarecandy.pokeutils.tranm;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class AnimationInfo extends Table {
    public static void ValidateVersion() {
        Constants.FLATBUFFERS_23_5_26();
    }

    public static AnimationInfo getRootAsAnimationInfo(ByteBuffer _bb) {
        return getRootAsAnimationInfo(_bb, new AnimationInfo());
    }

    public static AnimationInfo getRootAsAnimationInfo(ByteBuffer _bb, AnimationInfo obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        __reset(_i, _bb);
    }

    public AnimationInfo __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public long doesLoop() {
        int o = __offset(4);
        return o != 0 ? (long) bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L;
    }

    public long animationCount() {
        int o = __offset(6);
        return o != 0 ? (long) bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L;
    }

    public long animationRate() {
        int o = __offset(8);
        return o != 0 ? (long) bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L;
    }

    public static int createAnimationInfo(FlatBufferBuilder builder,
                                          long doesLoop,
                                          long animationCount,
                                          long animationRate) {
        builder.startTable(3);
        AnimationInfo.addAnimationRate(builder, animationRate);
        AnimationInfo.addAnimationCount(builder, animationCount);
        AnimationInfo.addDoesLoop(builder, doesLoop);
        return AnimationInfo.endAnimationInfo(builder);
    }

    public static void startAnimationInfo(FlatBufferBuilder builder) {
        builder.startTable(3);
    }

    public static void addDoesLoop(FlatBufferBuilder builder, long doesLoop) {
        builder.addInt(0, (int) doesLoop, (int) 0L);
    }

    public static void addAnimationCount(FlatBufferBuilder builder, long animationCount) {
        builder.addInt(1, (int) animationCount, (int) 0L);
    }

    public static void addAnimationRate(FlatBufferBuilder builder, long animationRate) {
        builder.addInt(2, (int) animationRate, (int) 0L);
    }

    public static int endAnimationInfo(FlatBufferBuilder builder) {
        int o = builder.endTable();
        return o;
    }

    public static final class Vector extends BaseVector {
        public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
            __reset(_vector, _element_size, _bb);
            return this;
        }

        public AnimationInfo get(int j) {
            return get(new AnimationInfo(), j);
        }

        public AnimationInfo get(AnimationInfo obj, int j) {
            return obj.__assign(__indirect(__element(j), bb), bb);
        }
    }

    public AnimationInfoT unpack() {
        AnimationInfoT _o = new AnimationInfoT();
        unpackTo(_o);
        return _o;
    }

    public void unpackTo(AnimationInfoT _o) {
        long _oDoesLoop = doesLoop();
        _o.setDoesLoop(_oDoesLoop);
        long _oAnimationCount = animationCount();
        _o.setAnimationCount(_oAnimationCount);
        long _oAnimationRate = animationRate();
        _o.setAnimationRate(_oAnimationRate);
    }

    public static int pack(FlatBufferBuilder builder, AnimationInfoT _o) {
        if (_o == null) return 0;
        return createAnimationInfo(
                builder,
                _o.getDoesLoop(),
                _o.getAnimationCount(),
                _o.getAnimationRate());
    }
}

