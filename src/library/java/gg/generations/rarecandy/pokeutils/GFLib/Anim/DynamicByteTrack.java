// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.GFLib.Anim;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class DynamicByteTrack extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static DynamicByteTrack getRootAsDynamicByteTrack(ByteBuffer _bb) { return getRootAsDynamicByteTrack(_bb, new DynamicByteTrack()); }
  public static DynamicByteTrack getRootAsDynamicByteTrack(ByteBuffer _bb, DynamicByteTrack obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DynamicByteTrack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int byte_(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int byte_Length() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector byteVector() { return byteVector(new ByteVector()); }
  public ByteVector byteVector(ByteVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer byte_AsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer byte_InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int createDynamicByteTrack(FlatBufferBuilder builder,
      int byte_Offset) {
    builder.startTable(1);
    DynamicByteTrack.addByte(builder, byte_Offset);
    return DynamicByteTrack.endDynamicByteTrack(builder);
  }

  public static void startDynamicByteTrack(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addByte(FlatBufferBuilder builder, int byte_Offset) { builder.addOffset(0, byte_Offset, 0); }
  public static int createByteVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createByteVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startByteVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endDynamicByteTrack(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DynamicByteTrack get(int j) { return get(new DynamicByteTrack(), j); }
    public DynamicByteTrack get(DynamicByteTrack obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public DynamicByteTrackT unpack() {
    DynamicByteTrackT _o = new DynamicByteTrackT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(DynamicByteTrackT _o) {
    int[] _oByte = new int[byte_Length()];
    for (int _j = 0; _j < byte_Length(); ++_j) {_oByte[_j] = byte_(_j);}
    _o.setByte(_oByte);
  }
  public static int pack(FlatBufferBuilder builder, DynamicByteTrackT _o) {
    if (_o == null) return 0;
    int _byte_ = 0;
    if (_o.getByte() != null) {
      byte[] __byte_ = new byte[_o.getByte().length];
      int _j = 0;
      for (int _e : _o.getByte()) { __byte_[_j] = (byte) _e; _j++;}
      _byte_ = createByteVector(builder, __byte_);
    }
    return createDynamicByteTrack(
      builder,
      _byte_);
  }
}

