package gg.generations.rarecandy.pokeutils.tracl;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Channels extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static Channels getRootAsChannels(ByteBuffer _bb) { return getRootAsChannels(_bb, new Channels()); }
  public static Channels getRootAsChannels(ByteBuffer _bb, Channels obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Channels __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ChannelList list() { return list(new ChannelList()); }
  public ChannelList list(ChannelList obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public ChannelUnknown unk1() { return unk1(new ChannelUnknown()); }
  public ChannelUnknown unk1(ChannelUnknown obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public ChannelUnknown unk2() { return unk2(new ChannelUnknown()); }
  public ChannelUnknown unk2(ChannelUnknown obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createChannels(FlatBufferBuilder builder,
      int listOffset,
      int unk1Offset,
      int unk2Offset) {
    builder.startTable(3);
    Channels.addUnk2(builder, unk2Offset);
    Channels.addUnk1(builder, unk1Offset);
    Channels.addList(builder, listOffset);
    return Channels.endChannels(builder);
  }

  public static void startChannels(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addList(FlatBufferBuilder builder, int listOffset) { builder.addOffset(0, listOffset, 0); }
  public static void addUnk1(FlatBufferBuilder builder, int unk1Offset) { builder.addOffset(1, unk1Offset, 0); }
  public static void addUnk2(FlatBufferBuilder builder, int unk2Offset) { builder.addOffset(2, unk2Offset, 0); }
  public static int endChannels(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Channels get(int j) { return get(new Channels(), j); }
    public Channels get(Channels obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ChannelsT unpack() {
    ChannelsT _o = new ChannelsT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ChannelsT _o) {
    if (list() != null) _o.setList(list().unpack());
    else _o.setList(null);
    if (unk1() != null) _o.setUnk1(unk1().unpack());
    else _o.setUnk1(null);
    if (unk2() != null) _o.setUnk2(unk2().unpack());
    else _o.setUnk2(null);
  }
  public static int pack(FlatBufferBuilder builder, ChannelsT _o) {
    if (_o == null) return 0;
    int _list = _o.getList() == null ? 0 : ChannelList.pack(builder, _o.getList());
    int _unk1 = _o.getUnk1() == null ? 0 : ChannelUnknown.pack(builder, _o.getUnk1());
    int _unk2 = _o.getUnk2() == null ? 0 : ChannelUnknown.pack(builder, _o.getUnk2());
    return createChannels(
      builder,
      _list,
      _unk1,
      _unk2);
  }
}

