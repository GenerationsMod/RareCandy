// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.tracm;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TRACM extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static TRACM getRootAsTRACM(ByteBuffer _bb) { return getRootAsTRACM(_bb, new TRACM()); }
  public static TRACM getRootAsTRACM(ByteBuffer _bb, TRACM obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TRACM __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TrackConfig config() { return config(new TrackConfig()); }
  public TrackConfig config(TrackConfig obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Track tracks(int j) { return tracks(new Track(), j); }
  public Track tracks(Track obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int tracksLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public Track.Vector tracksVector() { return tracksVector(new Track.Vector()); }
  public Track.Vector tracksVector(Track.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int len1() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int len2() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static int createTRACM(FlatBufferBuilder builder,
      int configOffset,
      int tracksOffset,
      int len1,
      int len2) {
    builder.startTable(4);
    TRACM.addTracks(builder, tracksOffset);
    TRACM.addConfig(builder, configOffset);
    TRACM.addLen2(builder, len2);
    TRACM.addLen1(builder, len1);
    return TRACM.endTRACM(builder);
  }

  public static void startTRACM(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addConfig(FlatBufferBuilder builder, int configOffset) { builder.addOffset(0, configOffset, 0); }
  public static void addTracks(FlatBufferBuilder builder, int tracksOffset) { builder.addOffset(1, tracksOffset, 0); }
  public static int createTracksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTracksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLen1(FlatBufferBuilder builder, int len1) { builder.addByte(2, (byte) len1, (byte) 0); }
  public static void addLen2(FlatBufferBuilder builder, int len2) { builder.addByte(3, (byte) len2, (byte) 0); }
  public static int endTRACM(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTRACMBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedTRACMBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TRACM get(int j) { return get(new TRACM(), j); }
    public TRACM get(TRACM obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

