// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.GFLib.Anim;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FixedByteTrack extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static FixedByteTrack getRootAsFixedByteTrack(ByteBuffer _bb) { return getRootAsFixedByteTrack(_bb, new FixedByteTrack()); }
  public static FixedByteTrack getRootAsFixedByteTrack(ByteBuffer _bb, FixedByteTrack obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FixedByteTrack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int byte_() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static int createFixedByteTrack(FlatBufferBuilder builder,
      int byte_) {
    builder.startTable(1);
    FixedByteTrack.addByte(builder, byte_);
    return FixedByteTrack.endFixedByteTrack(builder);
  }

  public static void startFixedByteTrack(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addByte(FlatBufferBuilder builder, int byte_) { builder.addByte(0, (byte) byte_, (byte) 0); }
  public static int endFixedByteTrack(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FixedByteTrack get(int j) { return get(new FixedByteTrack(), j); }
    public FixedByteTrack get(FixedByteTrack obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public FixedByteTrackT unpack() {
    FixedByteTrackT _o = new FixedByteTrackT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(FixedByteTrackT _o) {
    int _oByte = byte_();
    _o.setByte(_oByte);
  }
  public static int pack(FlatBufferBuilder builder, FixedByteTrackT _o) {
    if (_o == null) return 0;
    return createFixedByteTrack(
      builder,
      _o.getByte());
  }
}

