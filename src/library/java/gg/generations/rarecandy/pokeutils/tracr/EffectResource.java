// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.tracr;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class EffectResource extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static EffectResource getRootAsEffectResource(ByteBuffer _bb) { return getRootAsEffectResource(_bb, new EffectResource()); }
  public static EffectResource getRootAsEffectResource(ByteBuffer _bb, EffectResource obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EffectResource __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String filename() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer filenameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer filenameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int createEffectResource(FlatBufferBuilder builder,
      int filenameOffset) {
    builder.startTable(1);
    EffectResource.addFilename(builder, filenameOffset);
    return EffectResource.endEffectResource(builder);
  }

  public static void startEffectResource(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addFilename(FlatBufferBuilder builder, int filenameOffset) { builder.addOffset(0, filenameOffset, 0); }
  public static int endEffectResource(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EffectResource get(int j) { return get(new EffectResource(), j); }
    public EffectResource get(EffectResource obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public EffectResourceT unpack() {
    EffectResourceT _o = new EffectResourceT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(EffectResourceT _o) {
    String _oFilename = filename();
    _o.setFilename(_oFilename);
  }
  public static int pack(FlatBufferBuilder builder, EffectResourceT _o) {
    if (_o == null) return 0;
    int _filename = _o.getFilename() == null ? 0 : builder.createString(_o.getFilename());
    return createEffectResource(
      builder,
      _filename);
  }
}

