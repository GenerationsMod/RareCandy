// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.tracr;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TrackList extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static TrackList getRootAsTrackList(ByteBuffer _bb) { return getRootAsTrackList(_bb, new TrackList()); }
  public static TrackList getRootAsTrackList(ByteBuffer _bb, TrackList obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TrackList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Track list(int j) { return list(new Track(), j); }
  public Track list(Track obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int listLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public Track.Vector listVector() { return listVector(new Track.Vector()); }
  public Track.Vector listVector(Track.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createTrackList(FlatBufferBuilder builder,
      int listOffset) {
    builder.startTable(1);
    TrackList.addList(builder, listOffset);
    return TrackList.endTrackList(builder);
  }

  public static void startTrackList(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addList(FlatBufferBuilder builder, int listOffset) { builder.addOffset(0, listOffset, 0); }
  public static int createListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTrackList(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TrackList get(int j) { return get(new TrackList(), j); }
    public TrackList get(TrackList obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TrackListT unpack() {
    TrackListT _o = new TrackListT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TrackListT _o) {
    TrackT[] _oList = new TrackT[listLength()];
    for (int _j = 0; _j < listLength(); ++_j) {_oList[_j] = (list(_j) != null ? list(_j).unpack() : null);}
    _o.setList(_oList);
  }
  public static int pack(FlatBufferBuilder builder, TrackListT _o) {
    if (_o == null) return 0;
    int _list = 0;
    if (_o.getList() != null) {
      int[] __list = new int[_o.getList().length];
      int _j = 0;
      for (TrackT _e : _o.getList()) { __list[_j] = Track.pack(builder, _e); _j++;}
      _list = createListVector(builder, __list);
    }
    return createTrackList(
      builder,
      _list);
  }
}

