// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.gfbanm;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class CommandTrack extends Table {
    public static void ValidateVersion() {
        Constants.FLATBUFFERS_23_5_26();
    }

    public static CommandTrack getRootAsCommandTrack(ByteBuffer _bb) {
        return getRootAsCommandTrack(_bb, new CommandTrack());
    }

    public static CommandTrack getRootAsCommandTrack(ByteBuffer _bb, CommandTrack obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        __reset(_i, _bb);
    }

    public CommandTrack __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public String name() {
        int o = __offset(4);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer nameAsByteBuffer() {
        return __vector_as_bytebuffer(4, 1);
    }

    public ByteBuffer nameInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 4, 1);
    }

    public long frameStart() {
        int o = __offset(6);
        return o != 0 ? (long) bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L;
    }

    public long frameLen() {
        int o = __offset(8);
        return o != 0 ? (long) bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L;
    }

    public CommandEntry vec(int j) {
        return vec(new CommandEntry(), j);
    }

    public CommandEntry vec(CommandEntry obj, int j) {
        int o = __offset(10);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int vecLength() {
        int o = __offset(10);
        return o != 0 ? __vector_len(o) : 0;
    }

    public CommandEntry.Vector vecVector() {
        return vecVector(new CommandEntry.Vector());
    }

    public CommandEntry.Vector vecVector(CommandEntry.Vector obj) {
        int o = __offset(10);
        return o != 0 ? obj.__assign(__vector(o), 4, bb) : null;
    }

    public static int createCommandTrack(FlatBufferBuilder builder,
                                         int nameOffset,
                                         long frameStart,
                                         long frameLen,
                                         int vecOffset) {
        builder.startTable(4);
        CommandTrack.addVec(builder, vecOffset);
        CommandTrack.addFrameLen(builder, frameLen);
        CommandTrack.addFrameStart(builder, frameStart);
        CommandTrack.addName(builder, nameOffset);
        return CommandTrack.endCommandTrack(builder);
    }

    public static void startCommandTrack(FlatBufferBuilder builder) {
        builder.startTable(4);
    }

    public static void addName(FlatBufferBuilder builder, int nameOffset) {
        builder.addOffset(0, nameOffset, 0);
    }

    public static void addFrameStart(FlatBufferBuilder builder, long frameStart) {
        builder.addInt(1, (int) frameStart, (int) 0L);
    }

    public static void addFrameLen(FlatBufferBuilder builder, long frameLen) {
        builder.addInt(2, (int) frameLen, (int) 0L);
    }

    public static void addVec(FlatBufferBuilder builder, int vecOffset) {
        builder.addOffset(3, vecOffset, 0);
    }

    public static int createVecVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startVecVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static int endCommandTrack(FlatBufferBuilder builder) {
        int o = builder.endTable();
        return o;
    }

    public static final class Vector extends BaseVector {
        public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
            __reset(_vector, _element_size, _bb);
            return this;
        }

        public CommandTrack get(int j) {
            return get(new CommandTrack(), j);
        }

        public CommandTrack get(CommandTrack obj, int j) {
            return obj.__assign(__indirect(__element(j), bb), bb);
        }
    }

    public CommandTrackT unpack() {
        CommandTrackT _o = new CommandTrackT();
        unpackTo(_o);
        return _o;
    }

    public void unpackTo(CommandTrackT _o) {
        String _oName = name();
        _o.setName(_oName);
        long _oFrameStart = frameStart();
        _o.setFrameStart(_oFrameStart);
        long _oFrameLen = frameLen();
        _o.setFrameLen(_oFrameLen);
        CommandEntryT[] _oVec = new CommandEntryT[vecLength()];
        for (int _j = 0; _j < vecLength(); ++_j) {
            _oVec[_j] = (vec(_j) != null ? vec(_j).unpack() : null);
        }
        _o.setVec(_oVec);
    }

    public static int pack(FlatBufferBuilder builder, CommandTrackT _o) {
        if (_o == null) return 0;
        int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
        int _vec = 0;
        if (_o.getVec() != null) {
            int[] __vec = new int[_o.getVec().length];
            int _j = 0;
            for (CommandEntryT _e : _o.getVec()) {
                __vec[_j] = CommandEntry.pack(builder, _e);
                _j++;
            }
            _vec = createVecVector(builder, __vec);
        }
        return createCommandTrack(
                builder,
                _name,
                _o.getFrameStart(),
                _o.getFrameLen(),
                _vec);
    }
}

