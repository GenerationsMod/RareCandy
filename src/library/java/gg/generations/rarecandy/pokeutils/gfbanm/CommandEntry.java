// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.gfbanm;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class CommandEntry extends Table {
    public static void ValidateVersion() {
        Constants.FLATBUFFERS_23_5_26();
    }

    public static CommandEntry getRootAsCommandEntry(ByteBuffer _bb) {
        return getRootAsCommandEntry(_bb, new CommandEntry());
    }

    public static CommandEntry getRootAsCommandEntry(ByteBuffer _bb, CommandEntry obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        __reset(_i, _bb);
    }

    public CommandEntry __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public String name() {
        int o = __offset(4);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer nameAsByteBuffer() {
        return __vector_as_bytebuffer(4, 1);
    }

    public ByteBuffer nameInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 4, 1);
    }

    public byte tracksType() {
        int o = __offset(6);
        return o != 0 ? bb.get(o + bb_pos) : 0;
    }

    public Table tracks(Table obj) {
        int o = __offset(8);
        return o != 0 ? __union(obj, o + bb_pos) : null;
    }

    public static int createCommandEntry(FlatBufferBuilder builder,
                                         int nameOffset,
                                         byte tracksType,
                                         int tracksOffset) {
        builder.startTable(3);
        CommandEntry.addTracks(builder, tracksOffset);
        CommandEntry.addName(builder, nameOffset);
        CommandEntry.addTracksType(builder, tracksType);
        return CommandEntry.endCommandEntry(builder);
    }

    public static void startCommandEntry(FlatBufferBuilder builder) {
        builder.startTable(3);
    }

    public static void addName(FlatBufferBuilder builder, int nameOffset) {
        builder.addOffset(0, nameOffset, 0);
    }

    public static void addTracksType(FlatBufferBuilder builder, byte tracksType) {
        builder.addByte(1, tracksType, 0);
    }

    public static void addTracks(FlatBufferBuilder builder, int tracksOffset) {
        builder.addOffset(2, tracksOffset, 0);
    }

    public static int endCommandEntry(FlatBufferBuilder builder) {
        int o = builder.endTable();
        return o;
    }

    public static final class Vector extends BaseVector {
        public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
            __reset(_vector, _element_size, _bb);
            return this;
        }

        public CommandEntry get(int j) {
            return get(new CommandEntry(), j);
        }

        public CommandEntry get(CommandEntry obj, int j) {
            return obj.__assign(__indirect(__element(j), bb), bb);
        }
    }

    public CommandEntryT unpack() {
        CommandEntryT _o = new CommandEntryT();
        unpackTo(_o);
        return _o;
    }

    public void unpackTo(CommandEntryT _o) {
        String _oName = name();
        _o.setName(_oName);
        DataTrackUnion _oTracks = new DataTrackUnion();
        byte _oTracksType = tracksType();
        _oTracks.setType(_oTracksType);
        Table _oTracksValue;
        switch (_oTracksType) {
            case DataTrack.IntDataTrack:
                _oTracksValue = tracks(new IntDataTrack());
                _oTracks.setValue(_oTracksValue != null ? ((IntDataTrack) _oTracksValue).unpack() : null);
                break;
            case DataTrack.FloatDataTrack:
                _oTracksValue = tracks(new FloatDataTrack());
                _oTracks.setValue(_oTracksValue != null ? ((FloatDataTrack) _oTracksValue).unpack() : null);
                break;
            case DataTrack.ByteDataTrack:
                _oTracksValue = tracks(new ByteDataTrack());
                _oTracks.setValue(_oTracksValue != null ? ((ByteDataTrack) _oTracksValue).unpack() : null);
                break;
            case DataTrack.StringDataTrack:
                _oTracksValue = tracks(new StringDataTrack());
                _oTracks.setValue(_oTracksValue != null ? ((StringDataTrack) _oTracksValue).unpack() : null);
                break;
            default:
                break;
        }
        _o.setTracks(_oTracks);
    }

    public static int pack(FlatBufferBuilder builder, CommandEntryT _o) {
        if (_o == null) return 0;
        int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
        byte _tracksType = _o.getTracks() == null ? DataTrack.NONE : _o.getTracks().getType();
        int _tracks = _o.getTracks() == null ? 0 : DataTrackUnion.pack(builder, _o.getTracks());
        return createCommandEntry(
                builder,
                _name,
                _tracksType,
                _tracks);
    }
}

