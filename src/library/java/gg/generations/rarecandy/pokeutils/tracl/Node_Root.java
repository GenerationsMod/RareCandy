package gg.generations.rarecandy.pokeutils.tracl;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Node_Root extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static Node_Root getRootAsNode_Root(ByteBuffer _bb) { return getRootAsNode_Root(_bb, new Node_Root()); }
  public static Node_Root getRootAsNode_Root(ByteBuffer _bb, Node_Root obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Node_Root __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Node_Child children(int j) { return children(new Node_Child(), j); }
  public Node_Child children(Node_Child obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int childrenLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public Node_Child.Vector childrenVector() { return childrenVector(new Node_Child.Vector()); }
  public Node_Child.Vector childrenVector(Node_Child.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public Channels channels() { return channels(new Channels()); }
  public Channels channels(Channels obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public String name(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int nameLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public StringVector nameVector() { return nameVector(new StringVector()); }
  public StringVector nameVector(StringVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createNode_Root(FlatBufferBuilder builder,
      int childrenOffset,
      int channelsOffset,
      int nameOffset) {
    builder.startTable(3);
    Node_Root.addName(builder, nameOffset);
    Node_Root.addChannels(builder, channelsOffset);
    Node_Root.addChildren(builder, childrenOffset);
    return Node_Root.endNode_Root(builder);
  }

  public static void startNode_Root(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addChildren(FlatBufferBuilder builder, int childrenOffset) { builder.addOffset(0, childrenOffset, 0); }
  public static int createChildrenVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startChildrenVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addChannels(FlatBufferBuilder builder, int channelsOffset) { builder.addOffset(1, channelsOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(2, nameOffset, 0); }
  public static int createNameVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNameVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endNode_Root(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Node_Root get(int j) { return get(new Node_Root(), j); }
    public Node_Root get(Node_Root obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public Node_RootT unpack() {
    Node_RootT _o = new Node_RootT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(Node_RootT _o) {
    Node_ChildT[] _oChildren = new Node_ChildT[childrenLength()];
    for (int _j = 0; _j < childrenLength(); ++_j) {_oChildren[_j] = (children(_j) != null ? children(_j).unpack() : null);}
    _o.setChildren(_oChildren);
    if (channels() != null) _o.setChannels(channels().unpack());
    else _o.setChannels(null);
    String[] _oName = new String[nameLength()];
    for (int _j = 0; _j < nameLength(); ++_j) {_oName[_j] = name(_j);}
    _o.setName(_oName);
  }
  public static int pack(FlatBufferBuilder builder, Node_RootT _o) {
    if (_o == null) return 0;
    int _children = 0;
    if (_o.getChildren() != null) {
      int[] __children = new int[_o.getChildren().length];
      int _j = 0;
      for (Node_ChildT _e : _o.getChildren()) { __children[_j] = Node_Child.pack(builder, _e); _j++;}
      _children = createChildrenVector(builder, __children);
    }
    int _channels = _o.getChannels() == null ? 0 : Channels.pack(builder, _o.getChannels());
    int _name = 0;
    if (_o.getName() != null) {
      int[] __name = new int[_o.getName().length];
      int _j = 0;
      for (String _e : _o.getName()) { __name[_j] = builder.createString(_e); _j++;}
      _name = createNameVector(builder, __name);
    }
    return createNode_Root(
      builder,
      _children,
      _channels,
      _name);
  }
}

