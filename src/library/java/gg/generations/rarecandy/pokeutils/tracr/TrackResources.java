// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.tracr;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TrackResources extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static TrackResources getRootAsTrackResources(ByteBuffer _bb) { return getRootAsTrackResources(_bb, new TrackResources()); }
  public static TrackResources getRootAsTrackResources(ByteBuffer _bb, TrackResources obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TrackResources __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public AnimationResource animation() { return animation(new AnimationResource()); }
  public AnimationResource animation(AnimationResource obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public MaterialResource material() { return material(new MaterialResource()); }
  public MaterialResource material(MaterialResource obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public EffectResource effect() { return effect(new EffectResource()); }
  public EffectResource effect(EffectResource obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createTrackResources(FlatBufferBuilder builder,
      int animationOffset,
      int materialOffset,
      int effectOffset) {
    builder.startTable(3);
    TrackResources.addEffect(builder, effectOffset);
    TrackResources.addMaterial(builder, materialOffset);
    TrackResources.addAnimation(builder, animationOffset);
    return TrackResources.endTrackResources(builder);
  }

  public static void startTrackResources(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addAnimation(FlatBufferBuilder builder, int animationOffset) { builder.addOffset(0, animationOffset, 0); }
  public static void addMaterial(FlatBufferBuilder builder, int materialOffset) { builder.addOffset(1, materialOffset, 0); }
  public static void addEffect(FlatBufferBuilder builder, int effectOffset) { builder.addOffset(2, effectOffset, 0); }
  public static int endTrackResources(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TrackResources get(int j) { return get(new TrackResources(), j); }
    public TrackResources get(TrackResources obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TrackResourcesT unpack() {
    TrackResourcesT _o = new TrackResourcesT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TrackResourcesT _o) {
    if (animation() != null) _o.setAnimation(animation().unpack());
    else _o.setAnimation(null);
    if (material() != null) _o.setMaterial(material().unpack());
    else _o.setMaterial(null);
    if (effect() != null) _o.setEffect(effect().unpack());
    else _o.setEffect(null);
  }
  public static int pack(FlatBufferBuilder builder, TrackResourcesT _o) {
    if (_o == null) return 0;
    int _animation = _o.getAnimation() == null ? 0 : AnimationResource.pack(builder, _o.getAnimation());
    int _material = _o.getMaterial() == null ? 0 : MaterialResource.pack(builder, _o.getMaterial());
    int _effect = _o.getEffect() == null ? 0 : EffectResource.pack(builder, _o.getEffect());
    return createTrackResources(
      builder,
      _animation,
      _material,
      _effect);
  }
}

