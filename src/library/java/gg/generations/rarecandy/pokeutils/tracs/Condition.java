package gg.generations.rarecandy.pokeutils.tracs;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Condition extends Table {
    public static void ValidateVersion() {
        Constants.FLATBUFFERS_23_5_26();
    }

    public static Condition getRootAsCondition(ByteBuffer _bb) {
        return getRootAsCondition(_bb, new Condition());
    }

    public static Condition getRootAsCondition(ByteBuffer _bb, Condition obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        __reset(_i, _bb);
    }

    public Condition __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public String name() {
        int o = __offset(4);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer nameAsByteBuffer() {
        return __vector_as_bytebuffer(4, 1);
    }

    public ByteBuffer nameInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 4, 1);
    }

    public long func() {
        int o = __offset(6);
        return o != 0 ? (long) bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L;
    }

    public byte valueType() {
        int o = __offset(8);
        return o != 0 ? bb.get(o + bb_pos) : 0;
    }

    public Table value(Table obj) {
        int o = __offset(10);
        return o != 0 ? __union(obj, o + bb_pos) : null;
    }

    public static int createCondition(FlatBufferBuilder builder,
                                      int nameOffset,
                                      long func,
                                      byte valueType,
                                      int valueOffset) {
        builder.startTable(4);
        Condition.addValue(builder, valueOffset);
        Condition.addFunc(builder, func);
        Condition.addName(builder, nameOffset);
        Condition.addValueType(builder, valueType);
        return Condition.endCondition(builder);
    }

    public static void startCondition(FlatBufferBuilder builder) {
        builder.startTable(4);
    }

    public static void addName(FlatBufferBuilder builder, int nameOffset) {
        builder.addOffset(0, nameOffset, 0);
    }

    public static void addFunc(FlatBufferBuilder builder, long func) {
        builder.addInt(1, (int) func, (int) 0L);
    }

    public static void addValueType(FlatBufferBuilder builder, byte valueType) {
        builder.addByte(2, valueType, 0);
    }

    public static void addValue(FlatBufferBuilder builder, int valueOffset) {
        builder.addOffset(3, valueOffset, 0);
    }

    public static int endCondition(FlatBufferBuilder builder) {
        int o = builder.endTable();
        return o;
    }

    public static final class Vector extends BaseVector {
        public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
            __reset(_vector, _element_size, _bb);
            return this;
        }

        public Condition get(int j) {
            return get(new Condition(), j);
        }

        public Condition get(Condition obj, int j) {
            return obj.__assign(__indirect(__element(j), bb), bb);
        }
    }

    public ConditionT unpack() {
        ConditionT _o = new ConditionT();
        unpackTo(_o);
        return _o;
    }

    public void unpackTo(ConditionT _o) {
        String _oName = name();
        _o.setName(_oName);
        long _oFunc = func();
        _o.setFunc(_oFunc);
        ConditionValueUnion _oValue = new ConditionValueUnion();
        byte _oValueType = valueType();
        _oValue.setType(_oValueType);
        Table _oValueValue;
        switch (_oValueType) {
            case ConditionValue.ConditionValue_Int:
                _oValueValue = value(new ConditionValue_Int());
                _oValue.setValue(_oValueValue != null ? ((ConditionValue_Int) _oValueValue).unpack() : null);
                break;
            case ConditionValue.ConditionValue_Float:
                _oValueValue = value(new ConditionValue_Float());
                _oValue.setValue(_oValueValue != null ? ((ConditionValue_Float) _oValueValue).unpack() : null);
                break;
            case ConditionValue.ConditionValue_Bool:
                _oValueValue = value(new ConditionValue_Bool());
                _oValue.setValue(_oValueValue != null ? ((ConditionValue_Bool) _oValueValue).unpack() : null);
                break;
            case ConditionValue.ConditionValue_Trigger:
                _oValueValue = value(new ConditionValue_Trigger());
                _oValue.setValue(_oValueValue != null ? ((ConditionValue_Trigger) _oValueValue).unpack() : null);
                break;
            default:
                break;
        }
        _o.setValue(_oValue);
    }

    public static int pack(FlatBufferBuilder builder, ConditionT _o) {
        if (_o == null) return 0;
        int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
        byte _valueType = _o.getValue() == null ? ConditionValue.NONE : _o.getValue().getType();
        int _value = _o.getValue() == null ? 0 : ConditionValueUnion.pack(builder, _o.getValue());
        return createCondition(
                builder,
                _name,
                _o.getFunc(),
                _valueType,
                _value);
    }
}

