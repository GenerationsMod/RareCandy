// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.GFLib.Anim;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ByteDataTrack extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static ByteDataTrack getRootAsByteDataTrack(ByteBuffer _bb) { return getRootAsByteDataTrack(_bb, new ByteDataTrack()); }
  public static ByteDataTrack getRootAsByteDataTrack(ByteBuffer _bb, ByteDataTrack obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ByteDataTrack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int value() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static int createByteDataTrack(FlatBufferBuilder builder,
      int value) {
    builder.startTable(1);
    ByteDataTrack.addValue(builder, value);
    return ByteDataTrack.endByteDataTrack(builder);
  }

  public static void startByteDataTrack(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addValue(FlatBufferBuilder builder, int value) { builder.addByte(0, (byte) value, (byte) 0); }
  public static int endByteDataTrack(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ByteDataTrack get(int j) { return get(new ByteDataTrack(), j); }
    public ByteDataTrack get(ByteDataTrack obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public ByteDataTrackT unpack() {
    ByteDataTrackT _o = new ByteDataTrackT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(ByteDataTrackT _o) {
    int _oValue = value();
    _o.setValue(_oValue);
  }
  public static int pack(FlatBufferBuilder builder, ByteDataTrackT _o) {
    if (_o == null) return 0;
    return createByteDataTrack(
      builder,
      _o.getValue());
  }
}

