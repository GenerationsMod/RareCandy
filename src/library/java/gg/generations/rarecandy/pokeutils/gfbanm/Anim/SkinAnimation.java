// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.gfbanm.Anim;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SkinAnimation extends Table {
    public static void ValidateVersion() {
        Constants.FLATBUFFERS_23_5_26();
    }

    public static SkinAnimation getRootAsSkinAnimation(ByteBuffer _bb) {
        return getRootAsSkinAnimation(_bb, new SkinAnimation());
    }

    public static SkinAnimation getRootAsSkinAnimation(ByteBuffer _bb, SkinAnimation obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        __reset(_i, _bb);
    }

    public SkinAnimation __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public SkinTrack tracks(int j) {
        return tracks(new SkinTrack(), j);
    }

    public SkinTrack tracks(SkinTrack obj, int j) {
        int o = __offset(4);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int tracksLength() {
        int o = __offset(4);
        return o != 0 ? __vector_len(o) : 0;
    }

    public SkinTrack.Vector tracksVector() {
        return tracksVector(new SkinTrack.Vector());
    }

    public SkinTrack.Vector tracksVector(SkinTrack.Vector obj) {
        int o = __offset(4);
        return o != 0 ? obj.__assign(__vector(o), 4, bb) : null;
    }

    public static int createSkinAnimation(FlatBufferBuilder builder,
                                          int tracksOffset) {
        builder.startTable(1);
        SkinAnimation.addTracks(builder, tracksOffset);
        return SkinAnimation.endSkinAnimation(builder);
    }

    public static void startSkinAnimation(FlatBufferBuilder builder) {
        builder.startTable(1);
    }

    public static void addTracks(FlatBufferBuilder builder, int tracksOffset) {
        builder.addOffset(0, tracksOffset, 0);
    }

    public static int createTracksVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startTracksVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static int endSkinAnimation(FlatBufferBuilder builder) {
        int o = builder.endTable();
        return o;
    }

    public static final class Vector extends BaseVector {
        public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
            __reset(_vector, _element_size, _bb);
            return this;
        }

        public SkinAnimation get(int j) {
            return get(new SkinAnimation(), j);
        }

        public SkinAnimation get(SkinAnimation obj, int j) {
            return obj.__assign(__indirect(__element(j), bb), bb);
        }
    }

    public SkinAnimationT unpack() {
        SkinAnimationT _o = new SkinAnimationT();
        unpackTo(_o);
        return _o;
    }

    public void unpackTo(SkinAnimationT _o) {
        SkinTrackT[] _oTracks = new SkinTrackT[tracksLength()];
        for (int _j = 0; _j < tracksLength(); ++_j) {
            _oTracks[_j] = (tracks(_j) != null ? tracks(_j).unpack() : null);
        }
        _o.setTracks(_oTracks);
    }

    public static int pack(FlatBufferBuilder builder, SkinAnimationT _o) {
        if (_o == null) return 0;
        int _tracks = 0;
        if (_o.getTracks() != null) {
            int[] __tracks = new int[_o.getTracks().length];
            int _j = 0;
            for (SkinTrackT _e : _o.getTracks()) {
                __tracks[_j] = SkinTrack.pack(builder, _e);
                _j++;
            }
            _tracks = createTracksVector(builder, __tracks);
        }
        return createSkinAnimation(
                builder,
                _tracks);
    }
}

