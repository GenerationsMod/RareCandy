package gg.generations.rarecandy.pokeutils.tracs;// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class State extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static State getRootAsState(ByteBuffer _bb) { return getRootAsState(_bb, new State()); }
  public static State getRootAsState(ByteBuffer _bb, State obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public State __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String path() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pathAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer pathInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long type() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public String tag() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tagAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer tagInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public Source source() { return source(new Source()); }
  public Source source(Source obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Transition transitions(int j) { return transitions(new Transition(), j); }
  public Transition transitions(Transition obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int transitionsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public Transition.Vector transitionsVector() { return transitionsVector(new Transition.Vector()); }
  public Transition.Vector transitionsVector(Transition.Vector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public State states(int j) { return states(new State(), j); }
  public State states(State obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int statesLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public Vector statesVector() { return statesVector(new Vector()); }
  public Vector statesVector(Vector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String flags(int j) { int o = __offset(16); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int flagsLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public StringVector flagsVector() { return flagsVector(new StringVector()); }
  public StringVector flagsVector(StringVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createState(FlatBufferBuilder builder,
      int pathOffset,
      long type,
      int tagOffset,
      int sourceOffset,
      int transitionsOffset,
      int statesOffset,
      int flagsOffset) {
    builder.startTable(7);
    State.addFlags(builder, flagsOffset);
    State.addStates(builder, statesOffset);
    State.addTransitions(builder, transitionsOffset);
    State.addSource(builder, sourceOffset);
    State.addTag(builder, tagOffset);
    State.addType(builder, type);
    State.addPath(builder, pathOffset);
    return State.endState(builder);
  }

  public static void startState(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addPath(FlatBufferBuilder builder, int pathOffset) { builder.addOffset(0, pathOffset, 0); }
  public static void addType(FlatBufferBuilder builder, long type) { builder.addInt(1, (int) type, (int) 0L); }
  public static void addTag(FlatBufferBuilder builder, int tagOffset) { builder.addOffset(2, tagOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(3, sourceOffset, 0); }
  public static void addTransitions(FlatBufferBuilder builder, int transitionsOffset) { builder.addOffset(4, transitionsOffset, 0); }
  public static int createTransitionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTransitionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addStates(FlatBufferBuilder builder, int statesOffset) { builder.addOffset(5, statesOffset, 0); }
  public static int createStatesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startStatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFlags(FlatBufferBuilder builder, int flagsOffset) { builder.addOffset(6, flagsOffset, 0); }
  public static int createFlagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFlagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endState(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public State get(int j) { return get(new State(), j); }
    public State get(State obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public StateT unpack() {
    StateT _o = new StateT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(StateT _o) {
    String _oPath = path();
    _o.setPath(_oPath);
    long _oType = type();
    _o.setType(_oType);
    String _oTag = tag();
    _o.setTag(_oTag);
    if (source() != null) _o.setSource(source().unpack());
    else _o.setSource(null);
    TransitionT[] _oTransitions = new TransitionT[transitionsLength()];
    for (int _j = 0; _j < transitionsLength(); ++_j) {_oTransitions[_j] = (transitions(_j) != null ? transitions(_j).unpack() : null);}
    _o.setTransitions(_oTransitions);
    StateT[] _oStates = new StateT[statesLength()];
    for (int _j = 0; _j < statesLength(); ++_j) {_oStates[_j] = (states(_j) != null ? states(_j).unpack() : null);}
    _o.setStates(_oStates);
    String[] _oFlags = new String[flagsLength()];
    for (int _j = 0; _j < flagsLength(); ++_j) {_oFlags[_j] = flags(_j);}
    _o.setFlags(_oFlags);
  }
  public static int pack(FlatBufferBuilder builder, StateT _o) {
    if (_o == null) return 0;
    int _path = _o.getPath() == null ? 0 : builder.createString(_o.getPath());
    int _tag = _o.getTag() == null ? 0 : builder.createString(_o.getTag());
    int _source = _o.getSource() == null ? 0 : Source.pack(builder, _o.getSource());
    int _transitions = 0;
    if (_o.getTransitions() != null) {
      int[] __transitions = new int[_o.getTransitions().length];
      int _j = 0;
      for (TransitionT _e : _o.getTransitions()) { __transitions[_j] = Transition.pack(builder, _e); _j++;}
      _transitions = createTransitionsVector(builder, __transitions);
    }
    int _states = 0;
    if (_o.getStates() != null) {
      int[] __states = new int[_o.getStates().length];
      int _j = 0;
      for (StateT _e : _o.getStates()) { __states[_j] = State.pack(builder, _e); _j++;}
      _states = createStatesVector(builder, __states);
    }
    int _flags = 0;
    if (_o.getFlags() != null) {
      int[] __flags = new int[_o.getFlags().length];
      int _j = 0;
      for (String _e : _o.getFlags()) { __flags[_j] = builder.createString(_e); _j++;}
      _flags = createFlagsVector(builder, __flags);
    }
    return createState(
      builder,
      _path,
      _o.getType(),
      _tag,
      _source,
      _transitions,
      _states,
      _flags);
  }
}

