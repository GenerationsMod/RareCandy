// automatically generated by the FlatBuffers compiler, do not modify

package gg.generations.rarecandy.pokeutils.gfbanm;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class MaterialAnimation extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static MaterialAnimation getRootAsMaterialAnimation(ByteBuffer _bb) { return getRootAsMaterialAnimation(_bb, new MaterialAnimation()); }
  public static MaterialAnimation getRootAsMaterialAnimation(ByteBuffer _bb, MaterialAnimation obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MaterialAnimation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MaterialTrack tracks(int j) { return tracks(new MaterialTrack(), j); }
  public MaterialTrack tracks(MaterialTrack obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int tracksLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public MaterialTrack.Vector tracksVector() { return tracksVector(new MaterialTrack.Vector()); }
  public MaterialTrack.Vector tracksVector(MaterialTrack.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createMaterialAnimation(FlatBufferBuilder builder,
      int tracksOffset) {
    builder.startTable(1);
    MaterialAnimation.addTracks(builder, tracksOffset);
    return MaterialAnimation.endMaterialAnimation(builder);
  }

  public static void startMaterialAnimation(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addTracks(FlatBufferBuilder builder, int tracksOffset) { builder.addOffset(0, tracksOffset, 0); }
  public static int createTracksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTracksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endMaterialAnimation(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MaterialAnimation get(int j) { return get(new MaterialAnimation(), j); }
    public MaterialAnimation get(MaterialAnimation obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public MaterialAnimationT unpack() {
    MaterialAnimationT _o = new MaterialAnimationT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(MaterialAnimationT _o) {
    MaterialTrackT[] _oTracks = new MaterialTrackT[tracksLength()];
    for (int _j = 0; _j < tracksLength(); ++_j) {_oTracks[_j] = (tracks(_j) != null ? tracks(_j).unpack() : null);}
    _o.setTracks(_oTracks);
  }
  public static int pack(FlatBufferBuilder builder, MaterialAnimationT _o) {
    if (_o == null) return 0;
    int _tracks = 0;
    if (_o.getTracks() != null) {
      int[] __tracks = new int[_o.getTracks().length];
      int _j = 0;
      for (MaterialTrackT _e : _o.getTracks()) { __tracks[_j] = MaterialTrack.pack(builder, _e); _j++;}
      _tracks = createTracksVector(builder, __tracks);
    }
    return createMaterialAnimation(
      builder,
      _tracks);
  }
}

